from communications.ax5043_manager.ax5043_driver import Ax5043

# Ideas:
# * Writes replace read_defaults
# * FIFO utilities
class MockAx5043(Ax5043):
    def __init__(self):
        super().__init__(None)
        self.read_defaults = rst_values.copy()
        self.read_queue = {}

    def execute(self, cmds): pass

    def read(self, addr):
        if addr in self.read_queue:
            return self.read_queue.pop(addr)
        else:
            return self.read_defaults[addr]

    def read_16(self, addr): return 0x0000
    def read_fifo(self, count): return bytearray(count)
    def write_fifo(self, values): pass

# TODO: Document importance of rst_values
rst_values = {
    0x000: 0x51,
    0x001: 0x7d,
    0x002: 0x60,
    0x003: 0xf7,
    0x004: 0x77,
    0x005: 0x00,
    0x006: 0x00,
    0x007: 0x00,
    0x008: 0x00,
    0x009: 0x00,
    0x00a: 0x00,
    0x00b: 0x00,
    0x00c: 0x11,
    0x00d: 0x2a,
    0x00e: 0x00,
    0x00f: 0x00,
    0x010: 0x08,
    0x011: 0x02,
    0x012: 0x00,
    0x014: 0xff,
    0x015: 0xff,
    0x016: 0xff,
    0x017: 0xff,
    0x018: 0x00,
    0x019: 0x62,
    0x01a: 0x00,
    0x01c: 0x00,
    0x01d: 0x01,
    0x020: 0x00,
    0x021: 0x08,
    0x022: 0x04,
    0x023: 0x87,
    0x024: 0x03,
    0x025: 0x06,
    0x026: 0x06,
    0x027: 0x00,
    0x028: 0x00,
    0x029: 0x00,
    0x02a: 0x00,
    0x02b: 0x00,
    0x02c: 0x00,
    0x02d: 0x00,
    0x02e: 0x00,
    0x02f: 0x00,
    0x030: 0x00,
    0x031: 0x00,
    0x032: 0x00,
    0x033: 0x00,
    0x034: 0x00,
    0x035: 0x00,
    0x036: 0x00,
    0x037: 0x00,
    0x038: 0x00,
    0x039: 0x00,
    0x03b: 0x08,
    0x03c: 0x39,
    0x03d: 0x34,
    0x03e: 0xcc,
    0x03f: 0xcd,
    0x040: 0x00,
    0x041: 0x00,
    0x042: 0x00,
    0x043: 0x00,
    0x045: 0x00,
    0x046: 0x00,
    0x047: 0x00,
    0x048: 0x00,
    0x049: 0x00,
    0x04a: 0x00,
    0x04b: 0x00,
    0x04d: 0x00,
    0x04e: 0x00,
    0x04f: 0x00,
    0x050: 0x00,
    0x051: 0x00,
    0x052: 0x00,
    0x053: 0x00,
    0x054: 0x00,
    0x055: 0x00,
    0x059: 0x00,
    0x05a: 0x00,
    0x05b: 0x00,
    0x068: 0x00,
    0x069: 0x00,
    0x06a: 0x00,
    0x06b: 0x00,
    0x06c: 0x00,
    0x06d: 0x00,
    0x06e: 0x00,
    0x100: 0x13,
    0x101: 0x27,
    0x102: 0x0d,
    0x103: 0x00,
    0x104: 0x3d,
    0x105: 0x8a,
    0x106: 0x00,
    0x107: 0x00,
    0x108: 0x9e,
    0x109: 0x00,
    0x10a: 0x16,
    0x10b: 0x87,
    0x10c: 0x00,
    0x10d: 0x80,
    0x10e: 0xff,
    0x10f: 0x80,
    0x110: 0x00,
    0x111: 0x40,
    0x112: 0x00,
    0x113: 0x75,
    0x114: 0x04,
    0x115: 0x00,
    0x116: 0x00,
    0x117: 0x00,
    0x118: 0x00,
    0x120: 0xb4,
    0x121: 0x76,
    0x122: 0x00,
    0x123: 0x00,
    0x124: 0xf8,
    0x125: 0xf2,
    0x126: 0xc3,
    0x127: 0x0f,
    0x128: 0x1f,
    0x129: 0x0a,
    0x12a: 0x0a,
    0x12b: 0x46,
    0x12c: 0x00,
    0x12d: 0x20,
    0x12e: 0x16,
    0x12f: 0x88,
    0x130: 0xb4,
    0x131: 0x76,
    0x132: 0x00,
    0x133: 0x00,
    0x134: 0xf6,
    0x135: 0xf1,
    0x136: 0xc3,
    0x137: 0x0f,
    0x138: 0x1f,
    0x139: 0x0b,
    0x13a: 0x0b,
    0x13b: 0x46,
    0x13c: 0x00,
    0x13d: 0x20,
    0x13e: 0x18,
    0x13f: 0x88,
    0x140: 0xff,
    0x141: 0x76,
    0x142: 0x00,
    0x143: 0x00,
    0x144: 0xf5,
    0x145: 0xf0,
    0x146: 0xc3,
    0x147: 0x0f,
    0x148: 0x1f,
    0x149: 0x0d,
    0x14a: 0x0d,
    0x14b: 0x46,
    0x14c: 0x00,
    0x14d: 0x20,
    0x14e: 0x1a,
    0x14f: 0x88,
    0x150: 0xff,
    0x151: 0x76,
    0x152: 0x00,
    0x153: 0x00,
    0x154: 0xf5,
    0x155: 0xf0,
    0x156: 0xc3,
    0x157: 0x0f,
    0x158: 0x1f,
    0x159: 0x0d,
    0x15a: 0x0d,
    0x15b: 0x46,
    0x15c: 0x00,
    0x15d: 0x20,
    0x15e: 0x1a,
    0x15f: 0x88,
    0x160: 0x00,
    0x161: 0x00,
    0x162: 0x0a,
    0x163: 0x3d,
    0x164: 0x05,
    0x165: 0x00,
    0x166: 0x28,
    0x167: 0xf6,
    0x168: 0x00,
    0x169: 0x00,
    0x16a: 0x0f,
    0x16b: 0xff,
    0x16c: 0x00,
    0x16d: 0x00,
    0x16e: 0x00,
    0x16f: 0x00,
    0x170: 0x00,
    0x171: 0x00,
    0x180: 0x12,
    0x181: 0x10,
    0x182: 0x03,
    0x183: 0x03,
    0x184: 0x00,
    0x188: 0x09,
    0x189: 0x77,
    0x200: 0x20,
    0x201: 0x00,
    0x202: 0x00,
    0x203: 0x00,
    0x204: 0x00,
    0x205: 0x00,
    0x206: 0x00,
    0x207: 0x00,
    0x208: 0x00,
    0x209: 0x00,
    0x20a: 0x00,
    0x20b: 0x00,
    0x210: 0x00,
    0x211: 0x00,
    0x212: 0x00,
    0x213: 0x00,
    0x214: 0x00,
    0x215: 0x00,
    0x216: 0x1f,
    0x218: 0x00,
    0x219: 0x00,
    0x21c: 0x00,
    0x21d: 0x00,
    0x21e: 0x0f,
    0x220: 0x32,
    0x221: 0x0a,
    0x223: 0x32,
    0x224: 0x14,
    0x225: 0x73,
    0x226: 0x39,
    0x227: 0x00,
    0x228: 0x00,
    0x229: 0x00,
    0x22a: 0x00,
    0x22b: 0x00,
    0x22c: 0x00,
    0x22d: 0x00,
    0x22e: 0x00,
    0x22f: 0x00,
    0x230: 0x00,
    0x231: 0x00,
    0x232: 0x00,
    0x233: 0x00,
    0x300: 0x00,
    0x301: 0x3f,
    0x308: 0x00,
    0x309: 0x00,
    0x310: 0x00,
    0x311: 0x00,
    0x312: 0x20,
    0x313: 0xc4,
    0x314: 0x61,
    0x315: 0xa8,
    0x316: 0x00,
    0x317: 0x00,
    0x318: 0x00,
    0x319: 0x00,
    0x330: 0x00,
    0x331: 0x00,
    0x332: 0x00,
    0xf00: 0x00,
    0xf08: 0x04,
    0xf0c: 0x00,
    0xf0d: 0x04,
    0xf10: 0x04,
    0xf11: 0x80,
    0xf18: 0x06,
    0xf1c: 0x04,
    0xf21: 0x20,
    0xf22: 0x54,
    0xf23: 0x50,
    0xf26: 0x88,
    0xf30: 0x3f,
    0xf31: 0xf0,
    0xf32: 0x3f,
    0xf33: 0xf0,
    0xf34: 0x0f,
    0xf35: 0x10,
    0xf44: 0x25,
    0xf5f: 0xe7,
    0xf72: 0x00
}
