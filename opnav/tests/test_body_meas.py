# import numpy as np
import unittest
import os
import json
import re
import logging
from utils.log import log
import numpy as np

from core.find_algos.tiled_remap import st_to_sph
from core.const import BodyEnum, FileData, DetectionData, Vector3
from core.observe_functions import cam_to_body, body_to_T0
from core.opnav import calculate_cam_measurements
from utils.constants import FLIGHT_SOFTWARE_PATH


class BodyMeas(unittest.TestCase):
    """
    Tests the correctness of the tranformations used in taking a sterographic coordinate in the camera frame to a
    3D xyz unit vector in the satellite's body frame at the start of acquisition. This test achieves this by using the
    truth data in the opnav sim's observations.json files as reference. The stereographic coordinate is taken as input
    from the json and is taken through the sequence of transformations. The final result is compared with the final
    truth value from the json.
    """

    def load_json(self, jsonPath):
        """Loads data from an observations.json file generated by the opnav sim

        Args:
            jsonPath (str): Filepath to observations.json file

        Returns:
            dict: st_dict: Dict of stereographic centers for each frame and body
            dict: truth_dict: Dict of truth vectors for each body at the start of observation
            dict: diam_dict: Dict of the diameters for each body
            float: gyroY: Angular rotation of spacecraft, rad/s
        """
        with open(jsonPath, "r") as data:
            obs = json.load(data)
            frames = obs["observations"][0]["frames"]
            st_dict = {}
            truth_dict = {}

            # Get all detections for each frame
            for frame in sorted(frames, key=lambda f: f["image_stereographic"]):
                imgName = frame["image_stereographic"]
                det_st_dict = {}
                for det in frame["detections"]:
                    body = det["body"]
                    body = (
                        BodyEnum.Earth
                        if body == "Earth"
                        else BodyEnum.Moon
                        if body == "Moon"
                        else BodyEnum.Sun
                    )
                    det_st_dict[body] = det["center_st"]
                st_dict[imgName] = det_st_dict

            # Get truth data sizes
            diam_dict = {}
            for b in (BodyEnum.Earth, BodyEnum.Moon, BodyEnum.Sun):
                ang_diam = obs["observations"][0]["observed_bodies"][b]["angular_size"]
                diam_dict[b] = ang_diam
                truth_dict[b] = obs["observations"][0]["observed_bodies"][b][
                    "direction_body"
                ]

            gyroY = obs["observations"][0]["spacecraft"]["omega_body"][1]

        return st_dict, truth_dict, diam_dict, gyroY

    # Compares transforming stereographic coordinate with truth sim vector
    def transform(self, stVecs, truthVecs, gyroY):
        for f in stVecs.keys():
            logging.debug(f"File: {f}")
            fileInfo = FileData(f)
            # This needs to be done since the sim filenames have a different time format than what opnav generates
            dt = float(re.search(r"[dt](\d*\.?\d+)", f).group(1))
            for body in (BodyEnum.Earth, BodyEnum.Moon, BodyEnum.Sun):
                if body in stVecs[f].keys():
                    log.debug(f"Body: {body}")
                    log.debug(
                        f"Center_st: [{stVecs[f][body][0]}, {stVecs[f][body][1]}]"
                    )

                    # Stereographic coordinate to spherical
                    camVec = st_to_sph(stVecs[f][body][0], stVecs[f][body][1])
                    # logging.debug(f"Cam Vec: {camVec}")
                    detection = DetectionData(
                        filedata=fileInfo,
                        vector=Vector3(camVec[0], camVec[1], camVec[2]),
                        ang_diam=None,
                        detection=None,
                    )

                    # Camera frame to satellite body frame
                    bodyDet = cam_to_body(detection)
                    # logging.debug(f"Satellite Frame Vector: {bodyDet.vector}")

                    # Satellite body frame to T0 frame
                    finalT0Det = body_to_T0(bodyDet, dt, gyroY)

                    # Comparison
                    log.debug(f"Observe Start Vector: {finalT0Det.vector}")
                    log.debug(f"Truth Vector: {truthVecs[body]}")
                    vectorAngSep = calculate_cam_measurements(
                        finalT0Det.vector.data, truthVecs[body]
                    )
                    angSepDeg = np.rad2deg(vectorAngSep)
                    log.debug(
                        f"Vector Angular Separation: {vectorAngSep} rad, {angSepDeg} deg\n"
                    )

                    # Checks if seapration is less than 3 deg
                    self.assertLessEqual(
                        angSepDeg,
                        3,
                        "Body transformations do not match within margin of error!",
                    )

    def test_traj_case1c(self):
        path = os.path.join(
            FLIGHT_SOFTWARE_PATH,
            "OpticalNavigation/simulations/sim/data/traj-case1c_sim_no_outline/observations.json",
        )
        st_dict, truth_dict, _, gyroY = self.load_json(path)
        self.transform(st_dict, truth_dict, gyroY)

    def test_traj_trajectory(self):
        path = os.path.join(
            FLIGHT_SOFTWARE_PATH,
            "OpticalNavigation/simulations/sim/data/trajectory_sim/observations.json",
        )
        st_dict, truth_dict, _, gyroY = self.load_json(path)
        self.transform(st_dict, truth_dict, gyroY)


if __name__ == "__main__":
    unittest.main()
